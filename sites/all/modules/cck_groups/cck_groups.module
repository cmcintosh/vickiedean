<?php
// $Id: cck_groups.module,v 1.3 2010/01/04 02:43:36 MegaGrunt Exp $

/**
 * @file
 * Enables content types to serve as groups with
 * associated members who may post content restricted to group members. 
 */

/**
 * Groups are closed; only admins with edit access to the group node can
 * add members.
 */
define('CCK_GROUPS_MEMBERSHIP_CLOSED', 0);

/**
 * Groups are open for all users with 'join CCK groups' permission to join.
 */
define('CCK_GROUPS_MEMBERSHIP_OPEN', 1);

/**
 * No restrictions for this parent content type.
 */
define('CCK_GROUPS_ACCESS_NONE', 0);

/**
 * Only users associated with parent project can create linked child content.
 */
define('CCK_GROUPS_ACCESS_EDIT', 1);

/**
 * Only users associated with parent project can create or view linked child
 * content.
 */
define('CCK_GROUPS_ACCESS_VIEW', 2);

/**
 * Implementation of hook_boot().
 */
function cck_groups_init() {
 //module_load_include('inc', 'cck_groups', 'modules/casetracker_basic');
}

/**
 * Implementation of hook_menu().
 */
function cck_groups_menu() {

  $items = array();

	$items['cck_groups/join'] = array(
	  'title' => 'Join',
	  'type' => MENU_CALLBACK,
	  'page callback' => 'cck_groups_join',
	  'access arguments' => array('join CCK groups'),
	);
	$items['admin/settings/cck-groups'] = array(
	  'title' => 'CCK Groups',
	  'description' => 'Configure and set up CCK Groups.',
	  'page callback' => 'drupal_get_form',
	  'page arguments' => array('cck_groups_admin_settings'),
	  'access arguments' => array('administer site configuration'),
	);

  return $items;
}

/**
 * Menu callback for module settings.
 */
function cck_groups_admin_settings() {
  $form = array();

  $form['install'] = array(
    '#type' => 'fieldset',
    '#title' => t('Setup instructions'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );
  $form['install']['file'] = array(
    '#type' => 'textarea',
    '#default_value' => file_get_contents(drupal_get_path('module', 'cck_groups'). '/INSTALL.txt'),
    '#rows' => 15,
  );

  // If Content Copy is enabled, offer an import link.
  if (module_exists('content_copy')) {
    $form['macro'] = array(
      '#type' => 'fieldset',
      '#title' => t('Create a group type'),
      '#description' => t('Follow this link to create automatically a group content type and import preconfigured fields.'),
      '#collapsible' => TRUE,
      '#collapsed' => FALSE,
    );
    $form['macro']['link'] = array(
      '#type' => 'markup',
      '#value' => l(t('import'), 'admin/content/types/import', array('query' => 'macro_file='. drupal_get_path('module', 'cck_groups') .'/group_content_type.txt')),
    );
  }
  else {
    drupal_set_message(t('To generate automatically a group content type or relevant fields, enable the Content Copy module and return to this page.'));
  }

  if (variable_get('cck_groups_enabled', 0)) {
    $status = t('enabled');
    $button_text = t('Disable');
    $description = t('Before disabling this module, use the button below to restore default permissions.');
  }
  else {
    $status = t('disabled');
    $button_text = t('Enable');
    $description = t('Enable access control if you want to author any content that is restricted to group members. The button below will delete one record in your node_access table (if needed) and thus enable node permissions on your site. You may revert by clicking the same button again. If you switch back and forth, your node permissions are preserved.');
  }
  $form['settings']['cck_groups_module_status'] = array(
    '#type' => 'fieldset',
    '#title' => t('Access control'),
    '#description' => $description,
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );
  $form['settings']['cck_groups_module_status']['module_action'] = array(
    '#type' => 'submit',
    '#value' => $button_text,
    '#prefix' => '<p>'. t('CCK Groups access control is currently @status.', array('@status' => $status)). '</p>',
  );

  return $form;
}

/**
 * Submit handler for admin settings form.
 */
function cck_groups_admin_settings_submit($form, &$form_state) {

  switch ($form_state['clicked_button']['#value']) {
    case t('Enable'):
      variable_set('cck_groups_enabled', 1);
      node_access_rebuild();
      drupal_set_message(t('The node access table has been rebuilt.'));
      break;
    case t('Disable'):
      variable_set('cck_groups_enabled', 0);
      node_access_rebuild();
      drupal_set_message(t('The node access table has been rebuilt.'));
      break;
  }
}

/**
 * Menu callback. Join a group.
 *
 * @return
 *   TRUE on success, FALSE on failure.
 */
function cck_groups_join() {
  global $user;

  // Only authenticated users can join.
  // Load the group.
  if ($user->uid && is_numeric(arg(2)) && $node = node_load(arg(2))) {
    // Only allow joining if the group is open.
    if (variable_get('cck_groups_membership_'. $node->type, CCK_GROUPS_MEMBERSHIP_CLOSED) == CCK_GROUPS_MEMBERSHIP_OPEN) {
      cck_groups_add_member($user, $node);
    }
  }
  return FALSE;
}

/**
 * Implementation of hook_block().
 */
function cck_groups_block($op = 'list', $delta = 0, $edit = array()) {
  switch ($op) {
    case 'list':
      $blocks = array();
      $blocks['details'] = array(
        'info' => t('Group details'),
        // Enable by default.
        'status' => 1,
        'weight' => -2,
      );
      return $blocks;
    case 'view':
      switch ($delta) {
        case 'details':
          return cck_groups_block_details();
      }
      break;
  }
}

/**
 * Generate details block for groups.
 *
 * @todo: complete. This is only a skeleton.
 */
function cck_groups_block_details() {
  global $user;

  $block = array();
  if ($node = cck_groups_get_current_group()) {
    $block['title'] = check_plain($node->title);
    // Need to determine if user is a member of the group.
    if (cck_groups_is_member($user, $node)) {
      $content = t('Welcome %user.', array('%user' => $user->name));
    }
    elseif ($node->cck_group['membership'] == CCK_GROUPS_MEMBERSHIP_OPEN && user_access('join CCK groups')) {
      $content = l(t('join'), 'cck_groups/join/'. $node->id);
    }
    else {
      $content = '';
    }
    $block['content'] = $content;
  }
  return $block;
}

/**
 * Add a user to a group.
 *
 * @return
 *   TRUE on success, FALSE on failure.
 */
function cck_groups_add_member($user, &$node) {
  if ($user->uid) {
    // Skip the node_save if the user is already a member.
    if (!cck_groups_is_member($user, $node) && $field_name = variable_get('cck_groups_field_'. $node->type, 0)) {
      // Add user to list of registered users.
      $node->{$field_name}[] = array(
        'uid' => $user->uid,
      );
      node_save($node);
    }
    return TRUE;
  }
  return FALSE;
}

/**
 * Implementation of hook_perm().
 */
function cck_groups_perm() {
  return array('join CCK groups');
}

/**
 * Implementation of hook_node_access_records().
 * @todo change variable name $node->cck_group and $node->cck_groups to be easier to tell apart  
 */
function cck_groups_node_access_records($node) {
  $grants = array();

  if (isset($node->cck_group) && !empty($node->cck_group)) {
    // Restrict access if appropriate.
    if ($node->cck_group['access'] == CCK_GROUPS_ACCESS_VIEW) {
      $grants[] = array(
        'realm' => 'cck_groups_membership',
        'gid' => $node->nid,
        'grant_view' => TRUE,
        'grant_update' => TRUE,
        'grant_delete' => TRUE,
				'priority' => 98,
      );
    }
  }

  if (isset($node->cck_groups) && !empty($node->cck_groups))  {
    foreach ($node->cck_groups as $gid) {
      // Grant open access if appropriate.
      $group = node_load($gid);

      if ($group->cck_group['access'] == CCK_GROUPS_ACCESS_VIEW) {
        // Grant membership-based access.
        $grants[] = array(
          'realm' => 'cck_groups_membership',
          'gid' => $gid,
          'grant_view' => TRUE,
          'grant_update' => TRUE,
          'grant_delete' => TRUE,
					'priority' => 98,
        );
      }
    }
  }

  return $grants;
}

/**
 * Implementation of hook_node_grants().
 */
function cck_groups_node_grants($account, $op) {
  $grants = array();
 
  if (variable_get('cck_groups_enabled', FALSE)) {
    // Get membership information.  

    if ($groups = cck_groups_get_user_groups($account)) {

      foreach ($groups as $key) {
	
        if ($op == 'view') { 
	
          if (!isset($grants['cck_groups_membership'])) {
            $grants['cck_groups_membership'] = array();
          } 
          
          $grants['cck_groups_membership'][] = $key;
        }
      }
    }

    return $grants;
  }
}


/**
 * Implementation of hook_node_access_explain.
 */
function cck_groups_node_access_explain($row) {
  if ($row->realm == 'cck_groups_membership') {
    return t('Members of the CCK Group may view this node.');
  }
}


/**
 * Implementation of hook_form_alter().
 */
function cck_groups_form_alter(&$form, &$form_state, $form_id) {

  if ($form_id == 'node_type_form' && isset($form['#node_type']) && cck_groups_is_group_type($form['#node_type']->type)) {
    $type = content_types($form['#node_type']->type);
    if (isset($type['fields']) && !empty($type['fields'])) {
      $options = array(t('none'));
      foreach ($type['fields'] as $field) {
        if ($field['type'] == 'userreference') {
          $options[$field['field_name']] = $field['widget']['label'];
        }
      }

      if (count($options) == 1) {
        drupal_set_message(t('No user reference field defined. To implement linked access for this content type, you need first to assign it a new field of type "userreference". Then return to this page and select that field as the "Associated users" field.'), 'error');
      }
      else {
        $form['cck_groups'] = array(
          '#type' => 'fieldset',
          '#title' => t('Groups'),
          '#description' => t('Use these options to control how this content type serves as a group that can be restricted to members.'),
          '#collapsible' => TRUE,
          '#collapsed' => FALSE,
          '#weight' => 0,
        );
        $form['cck_groups']['cck_groups_field'] = array(
          '#type' => 'select',
          '#title' => t('Members'),
          '#default_value' => variable_get('cck_groups_field_'. $form['#node_type']->type, 0),
          '#options' => $options,
          '#description' => t('Select a field to use for members. Edit or edit and view privileges for child content will be limited to users listed in this field.'),
        );
        $form['cck_groups']['cck_groups_membership'] = array(
          '#type' => 'radios',
          '#title' => t('Default membership mode'),
          '#default_value' => variable_get('cck_groups_membership_'. $form['#node_type']->type, CCK_GROUPS_MEMBERSHIP_CLOSED),
          '#options' => _cck_groups_membership_options(),
          '#description' => t('Select a default group membership mode for groups in this content type. Select "closed" to limit groups to users added by administrators. Select "open" to enable users with the "join CCK groups" permission to join groups.'),
        );
        $form['cck_groups']['cck_groups_access'] = array(
          '#type' => 'radios',
          '#title' => t('Default access restrictions'),
          '#default_value' => variable_get('cck_groups_access_'. $form['#node_type']->type, CCK_GROUPS_ACCESS_NONE),
          '#options' => _cck_groups_access_options(),
          '#description' => t('Select a default group access mode for groups in this content type.') . implode(' ', _cck_groups_access_options('description')),
        );
      }
    }
  }
  elseif (isset($form['#node']) && $form_id == $form['#node']->type .'_node_form' && cck_groups_is_group_type($form['#node']->type)) {
    $form['cck_group'] = array(
      '#type' => 'fieldset',
      '#title' => t('Group settings'),
      '#description' => t('Use these options to control group functionality and optionally to restrict content to members.'),
      '#collapsible' => TRUE,
      '#collapsed' => FALSE,
      '#weight' => 0,
      '#tree' => TRUE,
    );
    $form['cck_group']['membership'] = array(
      '#type' => 'radios',
      '#title' => t('Membership mode'),
      '#default_value' => isset($form['#node']->cck_group) ? $form['#node']->cck_group['membership'] : variable_get('cck_groups_membership_'. $node->type, CCK_GROUPS_MEMBERSHIP_CLOSED),
      '#options' => _cck_groups_membership_options(),
      '#description' => t('Select a membership mode for this group. Select "closed" if you wish to have only administrators add members to the group. Select "open" to enable users with the "join CCK groups" permission to join the group.'),
    );
    $form['cck_group']['access'] = array(
      '#type' => 'radios',
      '#title' => t('Access restrictions'),
      '#default_value' => isset($form['#node']->cck_group) ? $form['#node']->cck_group['access'] : variable_get('cck_groups_access_'. $node->type, CCK_GROUPS_ACCESS_NONE),
      '#options' => _cck_groups_access_options(),
      '#description' => t('Select a group access mode for this group.') . implode(' ', _cck_groups_access_options('description')),
    );
  }
  // Note: this elseif assumes that a group node cannot also be a child node.
  // Change to an if if we relax this assumption.
  elseif (isset($form['#node']) && $form_id == $form['#node']->type .'_node_form' && cck_groups_is_child_type($form['#node']->type) && isset($form['#node']->cck_groups)) {
    $child_type = cck_groups_get_child_types($form['#node']->type);
    // Return the (first) group node that this child is assigned to.
    $group = node_load($form['#node']->cck_groups[0]);

    if (isset($child_type['user_field'])) {
      _cck_groups_alter_element($form, $group, $child_type['user_field'], '_cck_groups_set_users');
    }

  }
  // If we are on the content import page, read in a file and set it as the default value.
  elseif ($form_id == 'content_copy_import_form') {
    if (isset($_REQUEST['macro_file']) && $file = file_get_contents($_REQUEST['macro_file'])) {
      $form['macro']['#default_value'] = $file;
      $form['#prefix'] .= '<br /><strong>'. t('A file has been preloaded for import.') .'</strong>';
    }
  }
}

/**
 * Alter a (potentially nested) form element.
 *
 * @param $form
 *   A form array to be altered.
 * @param $keys
 *   Array of keys identifying the form element to be altered. E.g.
 *   <code>
 *     array('my_fieldset', 'my_element')
 *   </code>
 * @param $callback
 *   The name of a function to pass the element through for filtering.
 */
function _cck_groups_alter_element(&$form, $node, $keys, $callback) {
  // Iterate through form elements.
  foreach (element_children($form) as $key) {
    // Only act if this is an element we're looking for.
    if ($keys[0] == $key) {
      // Determine if there are further levels of nesting.
      // If not, alter the element.
      if (count($filter) == 1) {
        call_user_func($callback, $form[$key]);
      }
      // If so, go one level deeper in the nested array.
      else {
        array_shift($keys);
        _cck_groups_alter_element($form[$key], $node, $keys, $callback);
      }
      break;
    }
  }
}

/**
 * Conditionally restrict a user list to users associated with a group.
 *
 * @param $element
 *   A form array to be altered.
 * @param $group
 *   A fully loaded group node object.
 */
function _cck_groups_set_users(&$element, $group) {
  // Only alter the element if editing for the group is restricted to members.
  if ($group->cck_group['access'] > CCK_GROUPS_ACCESS_NONE) {

    $element = array(
      '#type' => 'select',
      '#title' => $element['#title'],
      '#description' => $element['#description'],
      '#default_value' => $element['#default_value'],
      '#options' => cck_groups_get_members($group),
    );

  }
}

/**
 * Return an array of access options suitable for using in a form element.
 */
function _cck_groups_access_options($type = 'title') {
  return array(
    CCK_GROUPS_ACCESS_NONE => $type == 'title' ? t('none') : t('Select "none" to have no access limits.'),
    /* Commented out for now as not yet implemented.
    CCK_GROUPS_ACCESS_EDIT => $type == 'title' ? t('edit') : t('Select "edit" to have only members of groups be able to post content to the group but not restrict viewing of the group and its content.'),
    */
    CCK_GROUPS_ACCESS_VIEW => $type == 'title' ? t('edit and view') : t('Select "edit and view" to restrict view as well as edit access to members of groups.'),
  );
}

/**
 * Return an array of access options suitable for using in a form element.
 */
function _cck_groups_membership_options() {
  return array(
    CCK_GROUPS_MEMBERSHIP_CLOSED => t('closed'),
    CCK_GROUPS_MEMBERSHIP_OPEN => t('open'),
  );
}

/**
 * Implementation of hook_nodeapi().
 */
function cck_groups_nodeapi(&$node, $op, $teaser = NULL, $page = NULL) {

  switch ($op) {
    case 'load':
      $implementations = cck_groups_implementations();

      if (empty($implementations)) break;

      foreach ($implementations as $implementation) {

        if ($node->type == $implementation['parent_type']) {
          cck_groups_load_group($node);
          return;
        }
			// Deal with nodes contained within a group.
        elseif (array_key_exists($node->type, $implementation['child_types']) && isset($implementation['child_types'][$node->type]['parent_callback'])) {
					if (!isset($node->cck_groups)) $node->cck_groups = array();
          $node->cck_groups[] = call_user_func($implementation['child_types'][$node->type]['parent_callback'], $node);
        }
      }
      break;
    case 'delete':
      db_query('DELETE FROM {cck_groups} WHERE nid = %d', $node->nid);
      break;
    case 'insert':
    case 'update':
      if (isset($node->cck_group)) {
        cck_groups_save_group($node);
        // Make sure the node author is a member.
        $user = user_load(array('uid' => $node->uid));
        // This test is needed to prevent a loop, since
        // cck_groups_add_member calls node_save.
        if (!cck_groups_is_member($user, $node)) {
          cck_groups_add_member($user, $node);
        }
      }
      // Need to explicitly load any groups attributes
      // so that new content will have its associated groups
      // and hence get the correct node access data.
      elseif ($op == 'insert') {
        cck_groups_nodeapi($node, 'load');
      }
      break;
  }
}

/**
 * Load group data to a node.
 */
function cck_groups_load_group(&$node) {
  $result = db_query('SELECT * FROM {cck_groups} WHERE nid = %d', $node->nid);
  $node->cck_group = db_fetch_array($result);
}

/**
 * Save a node's group data.
 */
function cck_groups_save_group($node) {
  if (db_result(db_query('SELECT nid FROM {cck_groups} WHERE nid = %d', $node->nid))) {
    db_query("UPDATE {cck_groups} SET membership = %d, access = %d WHERE nid = %d", $node->cck_group['membership'], $node->cck_group['access'], $node->nid);
  }
  else {
    db_query("INSERT INTO {cck_groups} (nid, membership, access) VALUES (%d, %d, %d)", $node->nid, $node->cck_group['membership'], $node->cck_group['access']);
  }
}

/**
 * Find the current group being viewed. 
 *
 * @return
 *   The node object of the group whose content is being viewed, or FALSE if
 *   none.
 */
function cck_groups_get_current_group() {
  if (arg(0) == 'node' && is_numeric(arg(1))) {
    if ($node = node_load(arg(1))) {
      return _cck_groups_get_group($node);
    }
  }
  return FALSE;
}

/**
 * Determine if a given user has access to a node.
 *
 * @param $user
 *   A user to be tested.
 * @param $node
 *   A node to be tested.
 * @return
 *   Boolean TRUE or FALSE.
 */
// CRUFT ??????
function cck_groups_has_access($account, $node, $account) {

  // First, determine if this node type has access restrictions.
  if (variable_get('cck_groups_access_'. $node->type, CCK_GROUPS_ACCESS_NONE) == CCK_GROUPS_ACCESS_VIEW) {
    return cck_groups_is_member($account, $node);
  }

  // If no restrictions, return TRUE.
  return TRUE;
}

/**
 * Determine if a given user is a member of a group node.
 *
 * @param $user
 *   A user to be tested.
 * @param $node
 *   A node to be tested.
 * @return
 *   Boolean TRUE or FALSE.
 */
function cck_groups_is_member($user, $node) {
  $field_name = variable_get('cck_groups_field_'. $node->type, 0);
  foreach($node->$field_name as $record) {
    if (in_array($user->uid, $record)) {
      return TRUE;
    }
  }
  return FALSE;
}

/**
 * Return database information for a given field in a given content type.
 */
function cck_groups_get_db_info($type, $field_name) {
  $type = content_types($type);
  $field = $type['fields'][$field_name];
  return content_database_info($field);
}

/**
 * Helper function to return the group, if any, corresponding to a node.
 *
 * @param $node
 *   A node to be tested.
 * @return
 *   If the node is a child type, the parent node. If the
 *   node is a group type, the node itself. Otherwise, FALSE
 *   to indicate that no group was found.
 */
function _cck_groups_get_group($node) {
  // If the node is itself a group, return it.
  if (isset($node->cck_group) && !empty($node->cck_group)) {
    return $node;
  }
  // If the node has parent groups, return the first parent.
  if (isset($node->cck_groups) && !empty($node->cck_groups)) {
    return node_load($node->cck_groups[0]);
  }
  return FALSE;
}

/**
 * Return node types registered as supporting groups.
 */
function cck_groups_get_group_types() {
  $types = array();

  foreach (cck_groups_implementations() as $implementation) {
    if (isset($implementation['parent_type'])) {
      $types[] = $implementation['parent_type'];
    }
  }

  return (array) $types;
}

/**
 * Return the child node type of a given parent node type.
 */
function cck_groups_get_children_types($parent_type) {
  $types = array();
  foreach (cck_groups_implementations() as $implementation) {
    if ($implementation['parent_type'] == $parent_type) {
      return $implementation['child_types'];
    }
  }
  return FALSE;
}

/**
 * Return all node types that can be assigned to groups.
 */
function cck_groups_get_child_types($type = NULL) {
  $types = array();
  foreach (cck_groups_implementations() as $implementation) {
    $types = array_merge($types, $implementation['child_types']);
  }
  return $type ? $types[$type] : $types;
}

/**
 * Return data on registered linked access implementations.
 */
function cck_groups_implementations() {
  static $implementations = array();

  if (empty($implementations)) {
    module_load_include('inc', 'cck_groups', 'modules/casetracker_basic');

    foreach (module_implements('cck_groups') as $module) {
      $implementations[] = module_invoke($module, 'cck_groups');
      
    } 
  }

  return $implementations;
}


/**
 * Determine if a node type supports groups.
 */
function cck_groups_is_group_type($type) {
  return in_array($type, cck_groups_get_group_types());
}

/**
 * Return an array of users in a group.
 *
 * The node already contains the uids of members, but we need
 * names as well, so we need a fresh query.
 */
function cck_groups_get_members($node) {
  if ($field_name = variable_get('cck_groups_field_'. $node->type, 0)) {
    $users = array();
    $db_info = cck_groups_get_db_info($node->type, $field_name);

    $result = db_query('SELECT u.uid, u.name FROM {users} u INNER JOIN {'. $db_info['table'] .'} '. $db_info['table'] .' ON u.uid = '. $db_info['table'] .'.'. $db_info['columns']['uid']['column'] .' WHERE '. $db_info['table'] .'.vid = %d', $node->vid);
    while ($user = db_fetch_array($result)) {
      $users[$user['uid']] = $user['name'];
    }
    return $users;
  }
}

/**
 * Return an array of groups a user belongs to.
 */
function cck_groups_get_user_groups($user) {
  $groups = array();

  foreach (cck_groups_get_group_types() as $type) {
    if ($field_name = variable_get('cck_groups_field_'. $type, 0)) {
      $db_info = cck_groups_get_db_info($type, $field_name);
      $result = db_query('SELECT nid FROM {'. $db_info['table'] .'} WHERE '. $db_info['columns']['uid']['column'] .' = %d', $user->uid);

      while ($group = db_fetch_array($result)) {
        $groups[] = $group['nid'];
      }
    }
  }
  return $groups;
}

/**
 * Determine if a node type can be assigned to a group.
 */
function cck_groups_is_child_type($type) {
  return array_key_exists($type, cck_groups_get_child_types());
}
