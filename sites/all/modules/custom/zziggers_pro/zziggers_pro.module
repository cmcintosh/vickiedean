<?php

/**
  Implements hook_permission
*/



/**
		Implements hook_menu
*/
function zziggers_pro_menu(){ 
	$items['pro/authenticate'] = array( 
																																				'type' =>

MENU_CALLBACK,
																																				'page callback' => 'zziggers_pro_authenticate',
																																				'access arguments' => array('access content')
																																				);
	$items['pro/getClinics'] = array( 
																																		'type' => MENU_CALLBACK,
																																		'page callback' => 'zziggers_pro_get_clinic'
																																		);
	
	$items['pro/getLocations'] = array( 
																																				'type' => MENU_CALLBACK,
																																				'page callback' => 'zziggers_pro_get_locations',
																																				'access arguments' => array('access content')
																																				);
	$items['pro/getAccounts'] = array( 
																																			'type' => MENU_CALLBACK,
																																			'page callback' => 'zziggers_pro_get_accounts',
																																			'access arguments' => array('access content')
																																			);
	$items['pro/getReportTypes'] = array( 
																																						'type' => MENU_CALLBACK,
																																						'page callback' => 'zziggers_pro_get_types',
																																						'access arguments' => array('access content')
																																						);
	$items['pro/add/report'] = array( 
																																		'type' => MENU_CALLBACK,
																																		'page callback' => 'zziggers_pro_report_add',
																																		'access arguments' => array('access content')
																																		);
	$items['pro/add/location'] = array( 
																																				'type' => MENU_CALLBACK,
																																				'page callback' => 'zziggers_pro_location_add',
																																				'access arguments' => array('access content'),
																																				);
	$items['pro/add/file'] = array( 
																																'type' => MENU_CALLBACK,
																																'page callback' => 'zziggers_pro_file_add',
																																'access arguments' => array( 'access content')
																																);
	$items['pro/customreport'] = array( 
																																				'page callback' => 'zziggers_pro_customreport',
																																				'access arguments' => array('access content')
																																				);
	
	return $items;
}

function zziggers_pro_authenticate($response = TRUE){ 
		$username = $_GET['un'];
		$password = $_GET['pw'];
		
		if(user_authenticate($username, $password))
    {
      $user_obj = user_load_by_name($username);
      $form_state = array();
      $form_state['uid'] = $user_obj->uid;      
      user_login_submit(array(), $form_state);
						header("X-Physician-ID: " . $user_obj->uid);
						header("X-Physician-Ref: " . $user_obj->uid);
						if($response){
							echo db_query('SELECT pass FROM users WHERE name = :name', array(':name' => $username))->fetchField();
						}
				}
    else
    {
					 header("Content-Type: text/plain");
      response_status("401 Unauthorized");
				  exit;
    }
		

}

function zziggers_pro_get_locations(){ 
 global $user;
	if($user->uid < 1){ 
		zziggers_pro_authenticate(FALSE);
	}
	watchdog( 'ZZiggers Pro', "Called Get Locations " . $user->name );
	$output = array();
	
	$item = new stdClass();
	$item->id = 1;
	$item->name = "Location Name";
	$item->contact = "Location Contact";
	$item->phone = "Location Phone";
	$item->email = "Location Email";
	
	$output[] = $item;
	
	$view = views_get_view('clinic_locations');
	$view->set_display('block');
	$view->set_arguments( array( zziggers_pro_active_og($user) ) );
	$view->execute();
	$results = $view->result;
	
	// Loop through the view results
	foreach($results as $row){ 
		$item = new stdClass();
		$item->id = $row->nid;
		$item->name = $row->node_title;
		$item->contact = strip_tags($row->field_field_contact_name[0]['rendered']);
		$item->phone = strip_tags($row->field_field_phone[0]['rendered']);
		$item->email = strip_tags($row->field_field_email[0]['rendered']);
		$output[] = $item;
	}

	
	header("Content-Type: application/json");
 echo json_encode($output);
	exit;
}

function zziggers_pro_get_accounts(){ 
		global $user;
		if($user->uid < 1){ 
			zziggers_pro_authenticate(FALSE);
		}
		watchdog( 'ZZiggers Pro', "Called Get Accounts " . $user->name );
		
		$output = array();
		$item = new stdClass();
		$item->id = 1;
		$item->accnum = 100;
		$item->name = "Account Name";
		$item->clinc = false;
		$output[] = $item;
	
	header("Content-Type: application/json");
 echo json_encode($output);
	exit;
}

function zziggers_pro_get_types(){ 
		global $user;
		if($user->uid < 1){ 
			zziggers_pro_authenticate(FALSE);
		}
		watchdog( 'ZZiggers Pro', "Called Get Report Types " . $user->name );
		$output = array();
 	$o = new stdClass;
  $o->id = 1;
  $o->name = "Test Account";
  $o->price = "$10.00";
  $output[] = $o;

	header ("Content-Type: application/json");
 echo json_encode($output);
	exit;
}

function zziggers_pro_report_add(){ 
	 global $user;
		if($user->uid < 1){ 
			zziggers_pro_authenticate(FALSE);
		}
		$accountid = zziggers_pro_active_og($user);
	 $deliverto = (int) $_GET["d"]; 
  if( $deliverto < 1 || $deliverto > 2){
			 $deliverto=0;
		}
		$locnid = (int) $_GET["l"];
  $patient = $_GET["p"];
  $gender = $_GET["g"];
  $agerange = $_GET["r"];
  $clinicid = (int) $_GET["c"];
  watchdog( 'ZZiggers Pro', "Add Report: $accountid, $deliverto, $locnid, $patient, $gender, $agerange, $clinicid, " . $user->name );
		
		// Create new Report
		$node = new stdClass();
		$node->type = 'report';
		node_object_prepare($node);
  $node->uid = $user->uid;
		$node->og_group_ref['und'][0]['target_id'] = zziggers_pro_active_og($user);
		$node->status = 1;
		$node->title = $patient . ' - ' . date('m/d/Y h:i');
		$node->field_client_gender['und'][0]['value'] = (strtolower($gender) == 'm') ? 'Male' : 'Female';
		$node->field_client_age['und'][0]['value'] = $agerange;
		$node->field_client_id['und'][0]['value'] = $patient;
		node_save($node);
		
		if(isset($node->nid)){ 
			echo $node->nid;
		} else { 
			response_status("500 Internal Server Error");
			echo "Error creating location " . mysqli_error($mysqli);
			exit;
		}
}

function zziggers_pro_active_og($user){ 
  $gid = db_query('SELECT gid FROM {og_membership} WHERE entity_type = :entity_type AND etid = :etid LIMIT 1', array( ':entity_type' => 'user', ':etid' => $user->uid) )->fetchField();
	 return $gid;
}

function zziggers_pro_location_add(){
	 
		global $user;
		if($user->uid < 1){ 
			zziggers_pro_authenticate(FALSE);
		}
  $name = $_GET['n'];
		$contactname = $_GET['c'];
		$phone = $_GET['p'];
		$email = $_GET['e'];
		watchdog( 'ZZiggers Pro', "Add Location: $name, $contactname, $phone, $email, " . $user->name );
		
		
		if(!filter_var($_GET["e"],FILTER_VALIDATE_EMAIL)) {
				response_status("400 Bad Request");
				echo "Invalid e-mail address supplied";
				exit;
		}
		
		/* Add */
		$node = new stdClass();
		$node->type = 'location';
		node_object_prepare($node);

		$node->uid = $user->uid;
		$node->language = LANGUAGE_NONE;
		$node->title = $_REQUEST['n'];
		$node->field_contact_name['und'][0]['value'] = $_GET['c'];
		$node->field_phone['und'][0]['value'] = $_GET['p'];
		$node->field_email['und'][0]['email'] = $_GET['e'];
		$node->og_group_ref['und'][0]['target_id'] = zziggers_pro_active_og($user);
		
		node_save($node);
		/* Output the new report ID */
		if(isset($node->nid)){
				echo $node->nid;
		} else { 
			response_status("500 Internal Server Error");
			echo "Error creating location " . mysqli_error($mysqli);
			exit;
		}

	}

function zziggers_pro_file_add(){ 

watchdog( 'ZZiggers Pro', "Report File Add Called.");
	global $user;
	$repid = (int) $_POST["r"];
	
	$node = node_load($repid);
	if(!isset($node->nid)){ 
		
	} else { 
		$status = array ( );
		$errors = false;
		$files = array();
		
					foreach($_FILES as $fn => $farr) {
							$status[$fn] = (int) $farr["error"];
						
								$name = $farr["name"];
								$locn = $farr["tmp_name"];
								$file_data = file_get_contents($locn);
								$file = file_save_data($file_data, 'private://'.$name, FILE_EXISTS_RENAME);
								if( count($node->field_audio[LANGUAGE_NONE]) == 0){ $count = 0; } else { $count = count($node->field_audio[LANGUAGE_NONE]) + 1; }
								$node->field_audio[LANGUAGE_NONE][$count] = (array)$file;
								$node->field_audio[LANGUAGE_NONE][$count]['display'] = 1;
								
								node_save($node);
								watchdog( 'ZZiggers Pro', "Report File Add Called.
<pre>" . print_r($node->field_audio, 1) . "</pre>
");
								
								mkdir("sites/reports/$repid",0770);
								if(!move_uploaded_file($locn,"sites/reports/$repid/$name")) {
										$status[$fn] = UPLOAD_ERR_CANT_WRITE;
								}
						}		
	}
	
	header("Content-Type: application/json");
	if($errors) response_status("400 Bad Request");
	echo json_encode($status);

}

function zziggers_pro_customreport(){ 
 global $user;
	$account = user_load( db_query('SELECT uid FROM {users} WHERE name = :name AND pass = :pass', array(':name' => $_GET['un'], ':pass' => $_GET['tk']))->fetchField() );
 //	$user = $account;
 $display = drupal_get_form('zziggers_pro_customreport_form');

	return $display;
}

function zziggers_pro_customreport_form($form, $form_state){ 
 global $user;
	/* Pull From a View the list of Available Report Types */
	$form['report_type'] = array( 
																														'#type' => 'select',
																														'#title' => t('Report Type'),
																														'#options' => _get_reporttype_options(),
																														'#default_value' => variable_get('zziggers_pro_default_reporttype', -1)
																														);
	
	$form['additional_report'] = array( 
																																				'#type' => 'checkboxes',
																																				'#options' => _get_additional_options(),
																																				'#title' => t('Additional Reports')
																																				);
	
	$form['express'] = array( 
																										'#type' => 'radios',
																										'#title' => t('Delivery Type'),
																										'#options' => array( 
																																														0 => t('Normal Delivery'),
																																														1 => t('Expedited Delivery')
																																														),
																										'#default_value' => 0
																										);
	
	$form['referenced_report'] = array( 
																																				'#type' => 'value',
																																				'#value' => isset($_GET['id']) ? $_GET['id'] : 0
																																				);
	
	$form['submit'] = array( 
																									'#type' => 'submit',
																									'#value' => t('Submit for Processing')
																									);
		
	return $form;
}

function zziggers_pro_customreport_form_validate($form, $form_state){ 

}

function zziggers_pro_customreport_form_submit($form, $form_state){ 
 // Get the client ID for the Clinic.
  $client_uid = _get_clinic_owner($form_state['values']['referenced_report']);
  $report = node_load($form_state['values']['referenced_report']); // Loads our node
  $clinic = _get_clinic($form_state['values']['referenced_report']);
// Create a order
	 $order = commerce_order_new($client_uid, 'pending');
  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
  // Get the main report
		$product_id = 0;
		switch($form_state['values']['report_type']){ 
			case 'full':
				if($form_state['values']['express'] == 0) { 
					$product_id = 3;				
				} else { 
					$product_id = 4;
				}
			break;
			case 'mini':
				if($form_state['values']['express'] == 0) { 
					$product_id = 5;				
				} else { 
					$product_id = 6;
				}
			break;
			case 'nutritional':
				if($form_state['values']['express'] == 0) { 
					$product_id = 7;				
				} else { 
					$product_id = 8;
				}			
			break;
		
		}
		
		// Create the product for the Primary report type
		$product = commerce_product_load($product_id);
		$line_item = commerce_product_line_item_new($product, 1, $order->order_id, array());
		$line_item->field_report[LANGUAGE_NONE][0]['target_id'] = $form_state['values']['referenced_report'];
		commerce_line_item_save($line_item);
			drupal_set_message('
<pre>' . print_r($line_item, 1) . '</pre>
');
		$order_wrapper->commerce_line_items[] = $line_item;
		
		
		// Now we loop through the Additional reports and do the same function
		foreach($form_state['values']['additional_report'] as $id => $value){ 
		 if($id == $value){ 
				// Option selected
					$product = commerce_product_load($value);
					$line_item = commerce_product_line_item_new($product, 1, $order->order_id, array());
					commerce_line_item_save($line_item);
					$order_wrapper->commerce_line_items[] = $line_item;
			}
		
		}
		
 commerce_order_save($order);
	drupal_set_message('Thank you for your order. You should be notified soon when your report is ready.');
	drupal_goto("node/".$clinic->nid);
	
}

/**
 Helper function that returns the clinic
	*/
function _get_clinic($nid){ 
	$report = node_load($nid); // Loads our node
	$clinic = node_load($report->og_group_ref['und'][0]['target_id']); // Loads the clinic
}

/**
* Helper function that returns the owner for the clinic
*/
function _get_clinic_owner($nid){ 
	$report = node_load($nid); // Loads our node
	$clinic = node_load($report->og_group_ref['und'][0]['target_id']); // Loads the clinic
	return $clinic->uid; // Returns our Clinic owner uid	
}

function _get_reporttype_options(){ 
	$options = array( 
																		'full' => t('Full Report'),
																		'mini' => t('Mini Report'),
																		'nutritional' => t('Nutritional Report')
																		);
	
 return $options;
}

function _get_additional_options(){ 
	$options = array( );

 $view = views_get_view('get_additional_reports');
 $view->set_display('block');
	$view->execute();
	
	$results = $view->result;
	foreach($results as $id => $row){ 	
		$options[$row->product_id] = $row->field_title_field[0]['rendered'];
	}
																										
	return $options;
}

/**
* Below functions relate to Commerce Interactions and store operations.
*/ 